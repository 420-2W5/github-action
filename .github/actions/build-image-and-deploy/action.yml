name: "Build image and deploy"
description: "Une action représentant toutes les étapes pour déployer une application dans le cluster Kubernetes"
inputs:
  docker_registry_url: 
    description: "TODO"
    required: true
  docker_registry:
    description: "TODO"
    required: true
  docker_registry_tag_prefix:
    description: "TODO"
    required: true
  docker_username:
    description: "TODO"
    required: true
  docker_password:
    description: "TODO"
    required: true
  kubeconfig:
    description: "TODO"
    required: true
runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Login into private image repository
      run: |
        buildah login -u ${{ inputs.docker_username }} -p ${{ inputs.docker_password }} ${{ inputs.docker_registry_url }}
      shell: bash

    - name: Prepare variables for next steps
      run: |
        # Récupérer les valeurs du fichier cd-values.yml
        namespace=$(grep "^namespace:" "cd-values.yml" | awk '{print $2}')
        helmChatName=$(grep "^helmChat:" "cd-values.yml" | awk '{print $2}')
        urlPrefix=$(grep "^host:" "cd-values.yml" | awk '{print $2}')
        version=$(grep "^version:" "cd-values.yml" | awk '{print $2}')

        # Déterminer le tag de l'image et l'URL pour accéder à l'application en fonction de la branche git
        if [[ "${{ github.ref_name }}" == "main" ]]; then
          branchTag="latest"
          urlWithoutDomain=$urlPrefix
        else
          branchTag=$(echo "${{ github.ref_name }}" | tr '/' '-') # Remplacer les / par des - pour éviter les erreurs dans les noms de tags
          urlWithoutDomain=$(echo "${urlPrefix}-${branchTag}")
        fi
        
        # Calculer diverses valeurs utilisés pour le déploiement
        urlComplete="${urlWithoutDomain}.kapydata.com"
        lowercaseDockerRegistry=$(echo "${{ inputs.docker_registry }}" | tr '[:upper:]' '[:lower:]')
        lowercaseGitHubRepository=$(echo "${{ github.repository }}" | cut -d'/' -f2 | tr '[:upper:]' '[:lower:]')
        imagePathInRepository="${lowercaseDockerRegistry}/${lowercaseGitHubRepository}"
        tagVersion="${{ inputs.docker_registry_tag_prefix }}/${imagePathInRepository}:$version"
        tagBranch="${{ inputs.docker_registry_tag_prefix }}/${imagePathInRepository}:$branchTag"
        
        # Rendre les variables disponibles pour les étapes suivantes
        echo "namespace=$namespace" >> $GITHUB_ENV
        echo "helmChatName=$helmChatName" >> $GITHUB_ENV
        echo "urlPrefix=$urlPrefix" >> $GITHUB_ENV
        echo "urlWithoutDomain=$urlWithoutDomain" >> $GITHUB_ENV
        echo "urlComplete=$urlComplete" >> $GITHUB_ENV
        echo "TAG_VERSION=${tagVersion}" >> $GITHUB_ENV
        echo "TAG_BRANCH=${tagBranch}" >> $GITHUB_ENV
        
        # Afficher les valeurs pour vérification
        echo "namespace=$namespace"
        echo "helmChatName=$helmChatName"
        echo "urlPrefix=$urlPrefix"
        echo "urlWithoutDomain=$urlWithoutDomain"
        echo "urlComplete=$urlComplete"
        echo "tagVersion=$tagVersion"
        echo "tagBranch=$tagBranch"
      shell: bash
        
    - name: Build image locally # Docker ne peut pas être utilisé pour builder, car Kubernetes utilise ContainerD et le runner est un pod du cluster
      run: | 
        sudo buildah bud -f dockerfile -t ${{ env.TAG_BRANCH }} .
        sudo buildah tag ${{ env.TAG_BRANCH }} ${{ env.TAG_VERSION }}
      shell: bash

    - name: Push the image to private image repository
      run: |
        buildah push ${{ env.TAG_BRANCH }} ${{ env.TAG_BRANCH }}
        buildah push ${{ env.TAG_BRANCH }} ${{ env.TAG_VERSION }}
      shell: bash
      
    - name: Setup Kubernetes config
      run: |
        echo "${{ inputs.kubeconfig }}" > /tmp/kube.config
        echo "KUBECONFIG=/tmp/kube.config" >> $GITHUB_ENV
      shell: bash

    - name: Update Helm repo to get the latest version of the chart
      run: |
        helm repo add custom-helm-charts https://raw.githubusercontent.com/420-2w5/custom-helm-charts/refs/heads/main #TEMPORAIRE - DEVRAIT ÊTRE PRIVÉ
        helm repo update
      shell: bash
        
    - name: Install or upgrade the app with Helm
      run: |
        helm upgrade ${{ env.urlWithoutDomain }} ${{ env.helmChatName }}  -f ./cd-values.yml --install --set image=${{ env.TAG_BRANCH }} --set host=${{ env.urlComplete }} --namespace ${{ env.namespace }}
        kubectl rollout restart deployment/${{ env.urlWithoutDomain }}-deployment --namespace ${{ env.namespace }}
      shell: bash
